/**
 * Expense Service - API calls for expense management
 * 
 * What it does:
 * - Handles all expense-related API operations (CRUD)
 * - Provides filtering capabilities by category and date range
 * - Auto-generates timestamps when creating expenses
 * - Manages expense data validation and formatting
 * 
 * Expense interface:
 * - id?: number - Unique identifier (auto-generated by JSON server)
 * - description: string - What the expense was for (e.g., "Grocery shopping")
 * - amount: number - Dollar amount spent (positive number)
 * - category: string - Spending category (Food, Transportation, etc.)
 * - date: string - Date in YYYY-MM-DD format for easy sorting
 * - createdAt?: string - ISO timestamp when expense was added
 * 
 * Available operations:
 * - getExpenses(): Fetch all expenses
 * - getExpense(id): Get specific expense by ID
 * - createExpense(): Add new expense (timestamp auto-added)
 * - updateExpense(): Update existing expense (partial updates supported)
 * - deleteExpense(): Remove an expense
 * - getExpensesByCategory(): Filter expenses by category
 * - getExpensesByDateRange(): Filter expenses by date range
 * 
 * Key features:
 * - Uses PATCH for updates (only sends changed fields)
 * - Automatic timestamp generation on creation
 * - JSON server query parameter support for filtering
 * - Type-safe with full TypeScript interfaces
 */

import axiosInstance from './axios'

// Shape of expense data - keeping it simple but flexible
export interface Expense {
  id?: number
  description: string
  amount: number
  category: string
  date: string // Use YYYY-MM-DD format for easy sorting and filtering
  createdAt?: string // Auto-generated timestamp
}

export const expenseService = {
  // Fetch all expenses from JSON server
  getExpenses: async (): Promise<Expense[]> => {
    const response = await axiosInstance.get('/expenses')
    return response.data
  },

  // Get expense by ID
  getExpense: async (id: number): Promise<Expense> => {
    const response = await axiosInstance.get(`/expenses/${id}`)
    return response.data
  },

  // Create new expense - auto-generate the timestamp
  createExpense: async (expense: Omit<Expense, 'id' | 'createdAt'>): Promise<Expense> => {
    const response = await axiosInstance.post('/expenses', {
      ...expense,
      createdAt: new Date().toISOString(), // Add timestamp when creating
    })
    return response.data
  },

  // Update an existing expense - only sends the fields that changed
  updateExpense: async (id: number, expense: Partial<Expense>): Promise<Expense> => {
    const response = await axiosInstance.patch(`/expenses/${id}`, expense)
    return response.data
  },

  // Delete an expense
  deleteExpense: async (id: number): Promise<void> => {
    await axiosInstance.delete(`/expenses/${id}`)
  },

  // Get expenses by category
  getExpensesByCategory: async (category: string): Promise<Expense[]> => {
    const response = await axiosInstance.get(`/expenses?category=${category}`)
    return response.data
  },

  // Get expenses by date range
  getExpensesByDateRange: async (startDate: string, endDate: string): Promise<Expense[]> => {
    const response = await axiosInstance.get(`/expenses?date_gte=${startDate}&date_lte=${endDate}`)
    return response.data
  },
}